[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Projects/FreeMedia/FreeMedia/app/controllers/base.scala","languageId":"scala","version":1,"text":"package controllers\r\n\r\nimport javax.inject._\r\nimport play.api.libs.json.Json\r\nimport play.api._\r\nimport play.api.mvc._\r\nimport play.api.i18n._\r\nimport models.TaskListInMemoryModel\r\nimport play.api.data._\r\nimport play.api.data.Forms._\r\nimport play.api.libs.json._\r\nimport akka.actor.Actor\r\nimport play.api.libs.streams.ActorFlow\r\nimport akka.actor.ActorSystem\r\nimport akka.stream.Materializer\r\nimport actors.ChatActor\r\nimport akka.actor.Props\r\nimport actors.ChatManager\r\n\r\ncase class LoginData(username: String, password: String)\r\n\r\n\r\n@Singleton\r\nclass base @Inject() (cc: MessagesControllerComponents)(implicit system: ActorSystem, mat: Materializer) extends MessagesAbstractController(cc) {\r\n  val loginForm = Form(mapping(\r\n    \"Username\" -> text(3, 10),\r\n    \"Password\" -> text(8))(LoginData.apply)(LoginData.unapply))\r\n\r\n  def login=Action{ implicit request =>\r\n    Ok(views.html.login1(loginForm))\r\n  }\r\n  // def validateLoginGet(username:String,password: String)= Action{\r\n\r\n    // Ok(s\"$username got logged in with pass $password\")\r\n  // }\r\n\r\n  def validateLoginPost = Action{ implicit request =>\r\n    val postVals = request.body.asFormUrlEncoded\r\n    postVals.map { args =>\r\n      val username = args(\"username\").head\r\n      val password = args(\"password\").head\r\n      if (TaskListInMemoryModel.validateUser(username,password)) {\r\n        Ok(views.html.index(username)).withSession(\"username\" -> username)\r\n      } else{\r\n        Redirect(routes.base.validateLoginPost).flashing(\"error\" -> \"Invalid password/username combination\")\r\n      }\r\n      //      ok so routes. kerke uske aage ka ager link kisise match hota hai toh cool verna compile error\r\n      //      Ager toh shi rha toh tashList daaldenge verna login wapas\r\n      //      Ok(s\"$username logged in with $password\")\r\n    }.getOrElse(Redirect(routes.base.validateLoginPost))\r\n  }\r\n\r\n  def createUser = Action { implicit request =>\r\n    val postVals = request.body.asFormUrlEncoded\r\n    postVals.map { args =>\r\n      val username = args(\"username\").head\r\n      val password = args(\"password\").head\r\n      if (TaskListInMemoryModel.createUser(username, password)) {\r\n        Ok(views.html.index(username)).withSession(\"username\" -> username)\r\n      } else {\r\n        Redirect(routes.base.validateLoginPost)\r\n      }\r\n    }.getOrElse(Redirect(routes.base.validateLoginPost)).flashing(\"error\" -> \"User creation failed\")\r\n  }\r\n  //flash stays up for one call, it goes away after that\r\n  // so basically, request me store horha hai and username me stored tha usernameOption so get it?\r\n\r\n  def world = Action { implicit requset =>\r\n      Ok(\"hi\")\r\n    }\r\n\r\n\r\n\r\n  def product(prodType: String, prodNum: Int) = Action{\r\n    Ok(s\"Product Type is: $prodType, product number is: $prodNum\")\r\n  }\r\n\r\n  // def usa = Action {implicit request =>\r\n  // val usernameOption = request.session.get(\"username\")\r\n  // usernameOption.map { username =>\r\n    // Ok(views.html.usa(username)).withSession(\"username\" -> username)\r\n  // }.getOrElse {Ok(\"Failed\")}\r\n  // }\r\n\r\n\r\n\r\n  val manager = system.actorOf(Props[ChatManager], \"Manager\")\r\n\r\n\r\n  def socket = WebSocket.accept[String, String] { request =>\r\n    ActorFlow.actorRef { out =>\r\n      ChatActor.props(out, manager)\r\n    }\r\n  }\r\n\r\n\r\n  def logout = Action {\r\n    Redirect(routes.base.validateLoginPost).withNewSession\r\n  }\r\n\r\n  def freemedia = Action{ implicit request =>\r\n    val postVals = request.body.asFormUrlEncoded\r\n    postVals.map { args =>\r\n      val country = args(\"country\").head\r\n      val username = args(\"username\").head\r\n      Ok(views.html.media(country,username)).withSession(\"country\" -> country)\r\n      //      ok so routes. kerke uske aage ka ager link kisise match hota hai toh cool verna compile error\r\n      //      Ager toh shi rha toh tashList daaldenge verna login wapas\r\n      //      Ok(s\"$username logged in with $password\")\r\n    }.getOrElse(Ok(\"wtf\"))\r\n  }\r\n\r\n\r\n}\r\n\r\n        //val json = request.body.asJson.get\r\n        //val selectedVal = (json \\ \"selectedvalue\").as[String]\r\n        //val username = (json \\ \"username\").as[String]\r\n        //val selectedVal = request.session.get(\"country\")\r\n        //val username = \"Mark\"\r\n        //println(selectedVal)\r\n        //println(username)\r\n        // selectedVal.map { selectedVal =>\r\n          // Ok(views.html.media(username, selectedVall)).withSession(\"username\" -> username, \"selectedvalue\" -> selectedVall);\r\n        // };\r\n        //Ok(\"hi\")\r\n        \r\n        //Ok(views.html.media(selectedVal, username)).withSession(\"country\" -> selectedVal)"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Projects\FreeMedia\target\scala-2.12\zinc\inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed 27-Jan-2024, 2:59:04 AM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Projects/FreeMedia/FreeMedia/app/controllers/HomeController.scala","languageId":"scala","version":1,"text":"package controllers\r\n\r\nimport javax.inject._\r\nimport play.api._\r\nimport play.api.mvc._\r\n\r\n/**\r\n * This controller creates an `Action` to handle HTTP requests to the\r\n * application's home page.\r\n */\r\n@Singleton\r\nclass HomeController @Inject()(val controllerComponents: ControllerComponents) extends BaseController {\r\n\r\n  /**\r\n   * Create an Action to render an HTML page.\r\n   *\r\n   * The configuration in the `routes` file means that this method\r\n   * will be called when the application receives a `GET` request with\r\n   * a path of `/`.\r\n   */\r\n\r\n\r\n  def randomNumber = Action{\r\n    Ok(util.Random.nextInt(100).toString)\r\n  }\r\n}\r\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
